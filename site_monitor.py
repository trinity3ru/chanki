"""
–ú–æ–¥—É–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
"""
import hashlib
import requests
import time
from typing import Dict, Tuple, Optional
from bs4 import BeautifulSoup
import config
from database import SitesDatabase

class SiteMonitor:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    """
    
    def __init__(self, database: SitesDatabase):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–∞–π—Ç–æ–≤
        
        Args:
            database (SitesDatabase): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
        """
        self.database = database
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ User-Agent –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def check_site(self, site: Dict) -> Tuple[str, str, Optional[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–∏–Ω —Å–∞–π—Ç –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        
        Args:
            site (Dict): –î–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            Tuple[str, str, Optional[str]]: (—Å—Ç–∞—Ç—É—Å, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ö–µ—à_–∫–æ–Ω—Ç–µ–Ω—Ç–∞)
            –°—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –±—ã—Ç—å: 'ok', 'error', 'changed'
        """
        url = site['url']
        site_id = site['id']
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            response = self.session.get(
                url, 
                timeout=config.REQUEST_TIMEOUT,
                allow_redirects=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            if response.status_code != 200:
                error_msg = f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                self.database.update_site_status(site_id, 'error', error_message=error_msg)
                return 'error', error_msg, None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content = response.text
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if len(content) < config.MIN_CONTENT_LENGTH:
                error_msg = f"–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤"
                self.database.update_site_status(site_id, 'error', error_message=error_msg)
                return 'error', error_msg, None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—É–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏)
            soup = BeautifulSoup(content, 'html.parser')
            
            # –£–±–∏—Ä–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏ –∏ –¥—Ä—É–≥–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            for script in soup(["script", "style", "nav", "header", "footer", "aside"]):
                script.decompose()
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
            clean_text = soup.get_text()
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            clean_text = ' '.join(clean_text.split())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if len(clean_text) < config.MIN_CONTENT_LENGTH:
                error_msg = f"–°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤"
                self.database.update_site_status(site_id, 'error', error_message=error_msg)
                return 'error', error_msg, None
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_hash = hashlib.sha256(clean_text.encode('utf-8')).hexdigest()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            last_hash = site.get('last_content_hash')
            
            if last_hash is None:
                # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à
                self.database.update_site_status(site_id, 'ok', content_hash)
                return 'ok', '–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω', content_hash
            
            elif last_hash != content_hash:
                # –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                self.database.update_site_status(site_id, 'changed', content_hash)
                return 'changed', '–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è', content_hash
            
            else:
                # –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                self.database.update_site_status(site_id, 'ok', content_hash)
                return 'ok', '–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è', content_hash
                
        except requests.exceptions.Timeout:
            error_msg = f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (>{config.REQUEST_TIMEOUT}—Å)"
            self.database.update_site_status(site_id, 'error', error_message=error_msg)
            return 'error', error_msg, None
            
        except requests.exceptions.ConnectionError:
            error_msg = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∞–π—Ç—É"
            self.database.update_site_status(site_id, 'error', error_message=error_msg)
            return 'error', error_msg, None
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            self.database.update_site_status(site_id, 'error', error_message=error_msg)
            return 'error', error_msg, None
            
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            self.database.update_site_status(site_id, 'error', error_message=error_msg)
            return 'error', error_msg, None
    
    def check_all_sites(self) -> Dict[str, list]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∞–π—Ç—ã
        
        Returns:
            Dict[str, list]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        active_sites = self.database.get_active_sites()
        results = {
            'ok': [],
            'error': [],
            'changed': []
        }
        
        print(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É {len(active_sites)} —Å–∞–π—Ç–æ–≤...")
        
        for site in active_sites:
            print(f"–ü—Ä–æ–≤–µ—Ä—è—é {site['name']} ({site['url']})...")
            
            status, message, content_hash = self.check_site(site)
            results[status].append({
                'site': site,
                'message': message,
                'content_hash': content_hash
            })
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä—ã
            time.sleep(1)
        
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: OK={len(results['ok'])}, Errors={len(results['error'])}, Changed={len(results['changed'])}")
        
        return results
    
    def get_site_summary(self, site: Dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–∞–π—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            site (Dict): –î–∞–Ω–Ω—ã–µ —Å–∞–π—Ç–∞
            
        Returns:
            str: –¢–µ–∫—Å—Ç —Å–≤–æ–¥–∫–∏
        """
        name = site['name']
        url = site['url']
        last_check = site.get('last_check')
        last_status = site.get('last_status')
        check_count = site.get('check_count', 0)
        error_count = site.get('error_count', 0)
        
        summary = f"üåê {name}\n"
        summary += f"üîó {url}\n"
        summary += f"üìä –ü—Ä–æ–≤–µ—Ä–æ–∫: {check_count}\n"
        summary += f"‚ùå –û—à–∏–±–æ–∫: {error_count}\n"
        
        if last_check:
            summary += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check[:19]}\n"
        
        if last_status:
            status_emoji = {
                'ok': '‚úÖ',
                'error': '‚ùå',
                'changed': 'üîÑ'
            }
            summary += f"üìà –°—Ç–∞—Ç—É—Å: {status_emoji.get(last_status, '‚ùì')} {last_status}\n"
        
        return summary
